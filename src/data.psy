glb_badidx : u64 static := -1;

glb ::= struct
{
	errmsg : u8?;
	json : json_data;
	bin : glb_binary_chunk;

	default_scene : u64;
	scenes : glb_scene mut?;
	scenes_count : u64;

	nodes : glb_node mut?;
	nodes_count : u64;

	views : glb_view mut?;
	views_count : u64;

	accessors : glb_accessor mut?;
	accessors_count : u64;

	meshes : glb_mesh mut?;
	meshes_count : u64;

	materials : glb_material mut?;
	materials_count : u64;
};

glb_view ::= struct
{
	// optional - default zero
	offset : u64;
	length : u64;
	// optional - default badidx
	stride : u64;
	// optional - default badidx
	target : u64;
	// optional - default zero
	name : u8?;
	// optional - default zero
	name_len : u64;
};

glb_binary_chunk ::= struct
{
	data : u8?;
	length : u64;
};

glb_scene ::= struct
{
	// optional - default zero
	name : u8?;
	// optional - default zero
	name_len : u64;
	// optional - default zero
	node_indices : u64?;
	// optional - default zero
	node_indices_count : u64;
};

glb_node_transform ::= enum
{
	.matrix := 1;
	.trs := 2;
};

glb_node ::= struct
{
	// optional - default zero
	name : u8?;
	// optional - default zero
	name_len : u64;
	// optional - default badidx
	mesh_idx : u64;
	// optional - default badidx
	skin_idx : u64;
	// optional - default trs
	transform : glb_node_transform;
	// optional - undefined if transform != .matrix
	matrix : f32 mut[16];
	// optional - undefined if transform != .trs
	translate : f32 mut[3];
	// optional - undefined if transform != .trs
	rotate : f32 mut[4];
	// optional - undefined if transform != .trs
	scale : f32 mut[3];
	// optional - default zero
	children : u64 mut? mut;
	// optional - default zero
	children_count : u64;
};

glb_accessor ::= struct
{
	view_idx : u64;
	// optional - default 0
	offset : u64;
	component_type: u64;
	count : u64;
	type : u8?;
	type_len : u64;
};

glb_mesh ::= struct
{
	name : u8?;
	name_len : u64;
	primitives : glb_mesh_primitive mut?;
	primitives_count : u64;
};

glb_mesh_primitive ::= struct
{
	mode : u64;
	indices : u64;
	position_attrib : u64;
	normal_attrib : u64;
	tangent_attrib : u64;
	texcoord_attribs : u64 mut[4];
	color_attribs : u64 mut[4];
	joint_attribs : u64 mut[4];
	weight_attribs : u64 mut[4];
};

glb_material ::= struct
{
	name : u8?;
	name_len : u64;
	// not optional
	pbr_metallic_roughness : glb_pbr_metallic_roughness;
	normal_texture : glb_texture;
	has_normal_texture : bool;
	occlusion_texture : glb_texture;
	has_occlusion_texture : bool;
	emissive_texture : glb_texture;
	emissive_factor : f32 mut[4];
	has_emissive_texture : bool;
};

glb_pbr_metallic_roughness ::= struct
{
	base_colour_texture : glb_texture;
	base_colour_factor : f32 mut[4];
	metallic_roughness_texture : glb_texture;
	has_metallic_roughness_texture : bool;
	metallic_factor : f32;
	roughness_factor : f32;
};

glb_texture ::= struct
{
	index : u64;
	texCoord : u64;
	scale : f32;
};


glb_scene_verbose_print ::= func(s : glb_scene -> v0)
{
	putbytes(s.name, s.name_len);
	putzstr(": [");
	i : u64 mut;
	for(i = 0, i < (s.node_indices_count), i = i + 1)
	{
		putuint(deref(s.node_indices # i));
		if(i < (s.node_indices_count - 1))
		{
			putchar(' ');
		}
	}
	putzstr("]");
};

glb_node_verbose_print ::= func(n : glb_node -> v0)
{
	putbytes(n.name, n.name_len);
	putzstr(" [mesh: ");
	putuint(n.mesh_idx);
	putzstr(", skin: ");
	putuint(n.skin_idx);
	putzstr("], ");
	putzstr(__enumname(n.transform));
	putzstr(": [");
	putchar(10);

	i : u64 mut;
	j : u64 mut;
	if(n.transform == (glb_node_transform.matrix))
	{
		mat ::= n.matrix;
		for(i = 0, i < 4, i = i + 1)
		{
			putchar(9);
			putchar('|');
			for(j = 0, j < 4, j = j + 1)
			{
				putfloat(deref(mat # ((i * 3) + j)));
				putzstr("   ");
			}
			putchar('|');
			putchar(10);
		}
		putchar(10);
	}
	else
	{
		t ::= n.translate;
		r ::= n.rotate;
		s ::= n.scale;
		putchar(9);
		putzstr("t: [");
		for(i = 0, i < 3, i = i + 1)
		{
			putfloat(deref(t # i));
			if(i < 2)
			{
				putzstr(", ");
			}
		}
		putzstr("]");
		putchar(10);

		putchar(9);
		putzstr("r: [");
		for(i = 0, i < 4, i = i + 1)
		{
			putfloat(deref(r # i));
			if(i < 3)
			{
				putzstr(", ");
			}
		}
		putzstr("]");
		putchar(10);

		putchar(9);
		putzstr("s: [");
		for(i = 0, i < 3, i = i + 1)
		{
			putfloat(deref(s # i));
			if(i < 2)
			{
				putzstr(", ");
			}
		}
		putzstr("]]");
		putchar(10);
		if(n.children_count > 0)
		{
			putzstr(", children: [");
			putchar(10);
			for(i = 0, i < (n.children_count), i = i + 1)
			{
				putchar(9);
				if(i < (n.children_count - 1))
				{
					putuint(deref(n.children # i));
					putchar(10);
				}
			}
			putzstr("]");
		}
	}
	
};

glb_view_verbose_print ::= func(n : glb_view -> v0)
{
	if(n.name != zero)
	{
		putbytes(n.name, n.name_len);
	}
	else
	{
		putzstr("<unnamed view>");
	}
	putzstr(" [offset: ");
	putuint(n.offset);
	putzstr(", length: ");
	putuint(n.length);
	putzstr(", stride: ");
	putuint(n.stride);
	putzstr(", target: ");
	putuint(n.target);
	putzstr("]");
};

glb_mesh_verbose_print ::= func(m : glb_mesh -> v0)
{
	if(m.name != zero)
	{
		putbytes(m.name, m.name_len);
	}
	else
	{
		putzstr("<unnamed mesh>");
	}
	i : u64 mut;
	for(i = 0, i < (m.primitives_count), i = i + 1)
	{
		p ::= deref(m.primitives # i);
		putchar(10);
		putchar(9);
		putzstr("[mode: ");
		putuint(p.mode);
		putzstr(", indices: ");
		putuint(p.indices);
		putzstr(", attribs: {");
		putchar(10);
		putchar(9);putchar(9);
		putzstr("position: ");
		putuint(p.position_attrib);

		putchar(10);
		putchar(9);putchar(9);
		putzstr("normal: ");
		putuint(p.normal_attrib);

		putchar(10);
		putchar(9);putchar(9);
		putzstr("tangent: ");
		putuint(p.tangent_attrib);

		putchar(10);
		putchar(9);putchar(9);
		putzstr("texcoord0: ");
		putuint(deref(p.texcoord_attribs # 0));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("texcoord1: ");
		putuint(deref(p.texcoord_attribs # 1));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("texcoord2: ");
		putuint(deref(p.texcoord_attribs # 2));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("texcoord3: ");
		putuint(deref(p.texcoord_attribs # 3));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("color0: ");
		putuint(deref(p.color_attribs # 0));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("color1: ");
		putuint(deref(p.color_attribs # 1));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("color2: ");
		putuint(deref(p.color_attribs # 2));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("color3: ");
		putuint(deref(p.color_attribs # 3));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("joint0: ");
		putuint(deref(p.joint_attribs # 0));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("joint1: ");
		putuint(deref(p.joint_attribs # 1));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("joint2: ");
		putuint(deref(p.joint_attribs # 2));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("weight0: ");
		putuint(deref(p.weight_attribs # 0));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("weight1: ");
		putuint(deref(p.weight_attribs # 1));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("weight2: ");
		putuint(deref(p.weight_attribs # 2));

		putchar(10);
		putchar(9);putchar(9);
		putzstr("weight3: ");
		putuint(deref(p.weight_attribs # 3));
	}
};

glb_verbose_print ::= func(g : glb -> v0)
{
	if(g.errmsg != zero)
	{
		putzstr("glb error: ");
		putzstr(g.errmsg);
		putchar(10);
		return;
	}
	i : u64 mut;
	for(i = 0, i < (g.nodes_count), i = i + 1)
	{
		glb_node_verbose_print(deref(g.nodes # i));
		putchar(10);
	}
};
